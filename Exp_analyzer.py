import math

import numpy as geek
import sys

#==========================Переменные========================

#Задание параметров CUSUM алгоритма
k0 = 0  #лямбда 0
k1 = 0  #лямбда 1
h = 0   #решающий порог

#Задание хар-к имитационного эксперимента
L = 0   #выборка
k =0    #лябда в эксп распределении
#=============================================================


#==========================Консольный ввод и проверка========================

#Ввод k0 и проверка
k0 = float(input("Введите лямбда 0:"))

if k0 <= 0:
    print("Лямбда 0 должна быть больше или равна 0")
    sys.exit("Перезапустите программу и введите корректное значение")

#Ввод k1 и проверка
k1 = float(input("Введите лямбда 1:"))

if k1 <= 0:
    print("Лямбда 1 должна быть больше или равна 0")
    sys.exit("Перезапустите программу и введите корректное значение")

if k0 == k1:
    print("Лямбда 0 Лямда 1 не должны быть равны")
    sys.exit("Перезапустите программу и введите корректное значение")

#Ввод h и проверка
h = float(input("Введите решающий порог:"))

if h <= 0:
    print("Решающий порог должен быть больше или равна 0")
    sys.exit("Перезапустите программу и введите корректное значение")

#Ввод L и проверка
L = float(input("Введите длину выбоки:"))

if L <= 0:
    print("Длина выборки должна быть больше или равна 0:")
    sys.exit("Перезапустите программу и введите корректное значение")

#Ввод k и проверка
k = float(input("Введите интенсивность:"))

if k <= 0:
    print("Лямбда должна быть больше или равна 0")
    sys.exit("Перезапустите программу и введите корректное значение")

#============================================================================
print ("НАЧАЛО РАСЧЕТА:")
print("Лямбда 0:", k0)
print("Лямбда 1:", k1)
print("Решающий порог:", h)
print("Длина выборки:", L)
print("Лямбда:", L)
#===============================Генерация временного ряда=====================

T = 0
summ = 0
T_mas = []
mas = []                                           #список gi
while len(T_mas) < L:
    i = 0
    g = 0                                          #g0 = 0
    buf = 0                                        #сбросить значение gi перед циклом
    mas.clear()                                    #почистить список gi
    mas.append(0)                                  #g0 = 0
    while buf < h:
        ravn = geek.random.rand(1)                 #список из одного элемента с равномерным распредлением
        r = ravn[0]                                #извлечь элемент из списка
        print('r',i,':',r)
        x = (-1/k)*math.log(r)                   #xi = (-1/лямбда)*ln(ri)
        delta = math.log(k1/k0)-(k1-k0)*x        #deltagi = ln(лямбда1/лямбда0) - (лямбда1-лямбда0)*xi
        buf = mas[-1] + delta                      #gi = g(i-1)+deltagi
        if buf >= 0:                               #условие добавления в список
            mas.append(buf)
        else:
            mas.append(0)
        i = i + 1
        if mas[-1] >= h:                               #условие добавления в список
            mas_buf = mas
            mas_buf.pop()
            print("Список из gi номер", len(T_mas), ":", mas_buf)
    T = len(mas)
    T_mas.append(T)
    summ = summ + T
print("Список из Tj:", T_mas)

#=====================================================================================



#==================Обработка результатов (мат ожидание и дисперсия)===================
T_grade = summ/L
print("Мат ожидание:", T_grade)

s = 0
summ_dif = 0
for s in T_mas:
    summ_dif = s**2 - T_grade**2

Q_grade = summ_dif/L
print("Дисперсия:", T_grade)

q_grade = Q_grade/(L**(0.5))
print("Мат отклонение:", T_grade)

#=====================================================================================








